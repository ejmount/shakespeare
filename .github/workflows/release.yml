name: Mint Release

on:
    workflow_dispatch:
        inputs:
            dry-run:
                description: "Dry-run cargo publish and mark the GH release as prerelease"
                required: false
                type: boolean


jobs:
    publish:
        permissions:
            contents: write
        runs-on: ubuntu-latest
        steps:
            - name: Checkout sources
              uses: actions/checkout@v2
              with:
                submodules: true
            - name: Check semver
              uses: obi1kenobi/cargo-semver-checks-action@v2
              with:
                exclude: xtask

            - name: Checkout sources
              uses: actions/checkout@v2
              with:
                submodules: true
                clean: true

            - name: Get release tag
              id: release-tag
              # Using shell: bash explicitly because it turns on safety features like pipefail
              shell: bash
              run: |
                echo "tag=v$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "shakespeare").version')" >> "$GITHUB_OUTPUT"

            - name: Check for pre-existing release
              id: safety
              env:
                tag: ${{ steps.release-tag.outputs.tag }}
                GH_TOKEN: ${{ github.token }}
              shell: bash
              run: |
                if gh release view ${{ env.tag }} >/dev/null 2>&1; then
                  echo "check=false" >> "$GITHUB_OUTPUT"
                else
                  echo "check=true" >> "$GITHUB_OUTPUT"
                fi

            - name: Create the release & upload assets
              if: steps.safety.outputs.check == 'true'
              env:
                tag: ${{ steps.release-tag.outputs.tag }}
                GH_TOKEN: ${{ github.token }}
              shell: bash
              run: |
                shopt -s nullglob

                zip -r shakespeare-${{ env.tag }}.zip *

                gh release create \
                    '${{ env.tag }}' \
                    --draft='${{ inputs.dry-run }}' \
                    --prerelease='${{ inputs.dry-run }}' \
                    --title '${{ env.tag }}'\
                    --target='${{ github.ref_name }}' \
                    shakespeare-${{ env.tag }}.zip

                rm shakespeare-${{ env.tag }}.zip


            - name: Publish to Crates.io
              uses: katyo/publish-crates@v2
              with:
                dry-run: ${{ inputs.dry-run }}
                registry-token: ${{ secrets.CRATESIO_TOKEN }}
                ignore-unpublished-changes: true
